<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-06-29T23:21:39+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ishank’s Webpage</title><subtitle>Personal homepage: Ishank Juneja</subtitle><entry><title type="html">Power Supply Design</title><link href="http://localhost:4000/blog/nixieClockPower" rel="alternate" type="text/html" title="Power Supply Design" /><published>2020-06-29T00:00:00+05:30</published><updated>2020-06-29T00:00:00+05:30</updated><id>http://localhost:4000/blog/nixie-clock-2</id><content type="html" xml:base="http://localhost:4000/blog/nixieClockPower">&lt;hr /&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;br /&gt;
  &lt;img src=&quot;/assets/images/power_supply.jpg&quot; alt=&quot;Power Supply&quot; height=&quot;300&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;This post is Part 2 in a three part series on our design of a USB powered Nixie Tube Clock display. &lt;br /&gt;
&lt;a href=&quot;/blog/nixieClockPower&quot;&gt;Part 1&lt;/a&gt; discusses the characterization of Nixie tubes. &lt;br /&gt;
&lt;a href=&quot;/blog/nixieClockController&quot;&gt;Part 3&lt;/a&gt; describes the design of a circuit which controls the display using isolated control signals.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;introduction&quot;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;This page is about the design of the power supply module from our USB powered Nixie Tube clock display project. Since the USB source voltage is 5V DC and the operating voltage of the Nixie Tube display units is close to 180V DC, we needed to design a power supply capable of achieving this voltage step up. DC-DC power conversion and a large difference between input and output voltage difference mandated a switched mode power supply isolated power supply.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;This project was completed in partial fulfilment of the requirements for EE 344: Electronic Design Lab at IITB&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;A more detailed description of the project along with schematics can be found in our &lt;a href=&quot;/assets/docs/DD08_Design_Lab_report.pdf&quot;&gt;project report&lt;/a&gt;&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;A demonstration of our project can be &lt;a href=&quot;https://youtu.be/MN-FbMPmbiw&quot;&gt;found here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">A Reading List for The Coming Year</title><link href="http://localhost:4000/blog/nowReading" rel="alternate" type="text/html" title="A Reading List for The Coming Year" /><published>2020-06-29T00:00:00+05:30</published><updated>2020-06-29T00:00:00+05:30</updated><id>http://localhost:4000/blog/reading</id><content type="html" xml:base="http://localhost:4000/blog/nowReading">&lt;p&gt;&lt;strong&gt;Last updated: 29 June 2020&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;read-recently--now-reading&quot;&gt;&lt;strong&gt;Read Recently / Now Reading&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;s&gt;Weapons of Math destruction - Cathy O'Neil&lt;/s&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;s&gt;Sapiens - YNH&lt;/s&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;s&gt;Homo Deus - YNH&lt;/s&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;s&gt;The Selfish Gene - Dawkins&lt;/s&gt;
  &lt;/li&gt;
  &lt;li&gt;Thinking fast and slow - Daniel Kahnman&lt;/li&gt;
  &lt;li&gt;21 lessons for the 21st century - Harari&lt;/li&gt;
  &lt;li&gt;Book of Why - Judea Pearl&lt;/li&gt;
  &lt;li&gt;The Black Cloud - Hoyle&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;casual-reading&quot;&gt;&lt;strong&gt;Casual Reading&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Solaris - Stanislaw Lem&lt;/li&gt;
  &lt;li&gt;Enlightenment Now - Steven Pinker&lt;/li&gt;
  &lt;li&gt;The Everything Store - Brad Stone&lt;/li&gt;
  &lt;li&gt;A Brief History of Time - Stephen Hawking&lt;/li&gt;
  &lt;li&gt;The Emperor’s New Mind - Roger Penrose and follow up by Stuart hameroff
    &lt;ul&gt;
      &lt;li&gt;Do anesthetics (gas) affect the microtubules directly. Is this a special chemical 7. process?&lt;/li&gt;
      &lt;li&gt;This thread is essentially a connection between Quantum mechanics and Consciousness&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cycles of time - Roger Penrose&lt;/li&gt;
  &lt;li&gt;Shadows of the mind - Roger Penrose&lt;/li&gt;
  &lt;li&gt;The road to reality - Roger Penrose&lt;/li&gt;
  &lt;li&gt;The Extended phenotype - Dawkins&lt;/li&gt;
  &lt;li&gt;Deep Work - Cal Newport&lt;/li&gt;
  &lt;li&gt;Creation Revisited - Peter Atkins (Yes the Chemist)&lt;/li&gt;
  &lt;li&gt;Simulacron-3 - Galouye&lt;/li&gt;
  &lt;li&gt;Machines who think&lt;/li&gt;
  &lt;li&gt;Origin of species - Darwin&lt;/li&gt;
  &lt;li&gt;Mendelian Genetics&lt;/li&gt;
  &lt;li&gt;Dark Universe - Galouye&lt;/li&gt;
  &lt;li&gt;A for Andromeda - Fred Hoyle&lt;/li&gt;
  &lt;li&gt;Books by Arthur C Clarke&lt;/li&gt;
  &lt;li&gt;Einstein’s Dreams - Alan Littman&lt;/li&gt;
  &lt;li&gt;Communist Manifesto - Karl Marx&lt;/li&gt;
  &lt;li&gt;Free to choose - Milton Freidman&lt;/li&gt;
  &lt;li&gt;The Wealth of Nations - Adam Smith&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;academic--textbooks&quot;&gt;&lt;strong&gt;Academic / Textbooks&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Optimal Control - Dan Liberzon&lt;/li&gt;
  &lt;li&gt;Bayesian Networks - Pearl&lt;/li&gt;
  &lt;li&gt;Bandits and Online learning - Tor Lattimore&lt;/li&gt;
  &lt;li&gt;Causality by Judea Pearl&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Last updated: 29 June 2020</summary></entry><entry><title type="html">Clock Controller Design</title><link href="http://localhost:4000/blog/nixieClockController" rel="alternate" type="text/html" title="Clock Controller Design" /><published>2020-06-16T00:00:00+05:30</published><updated>2020-06-16T00:00:00+05:30</updated><id>http://localhost:4000/blog/nixie-clock-3</id><content type="html" xml:base="http://localhost:4000/blog/nixieClockController">&lt;hr /&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;br /&gt;
  &lt;img src=&quot;/assets/images/controller.jpg&quot; alt=&quot;power supply&quot; height=&quot;350&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;This post is Part 3 in a three part series on our design of a USB powered Nixie Tube Clock display. &lt;br /&gt;
&lt;a href=&quot;/blog/nixieClockPower&quot;&gt;Part 1&lt;/a&gt; discusses the characterization of Nixie tubes. &lt;br /&gt;
&lt;a href=&quot;/blog/nixieClockPower&quot;&gt;Part 2&lt;/a&gt; discusses the design of the power supply that steps up 5V to 170V.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Coming out on June 30.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;This project was completed in partial fulfilment of the requirements for EE 344: Electronic Design Lab at IITB&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;A more detailed description of the project along with schematics can be found in our &lt;a href=&quot;/assets/docs/DD08_Design_Lab_report.pdf&quot;&gt;project report&lt;/a&gt;&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;A demonstration of our project can be &lt;a href=&quot;https://youtu.be/MN-FbMPmbiw&quot;&gt;found here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Nixie Tube Characterization</title><link href="http://localhost:4000/blog/nixieClock" rel="alternate" type="text/html" title="Nixie Tube Characterization" /><published>2020-06-16T00:00:00+05:30</published><updated>2020-06-16T00:00:00+05:30</updated><id>http://localhost:4000/blog/nixie-clock</id><content type="html" xml:base="http://localhost:4000/blog/nixieClock">&lt;hr /&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;br /&gt;
  &lt;img src=&quot;/assets/images/nixie_clock_no_bg.jpg&quot; alt=&quot;nixie clock&quot; height=&quot;300&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;This post is Part 1 in a three part series on our design of a USB powered Nixie Tube Clock display. &lt;br /&gt;
&lt;a href=&quot;/blog/nixieClockPower&quot;&gt;Part 2&lt;/a&gt; discusses the design of the power supply that steps up 5V to 170V. &lt;br /&gt;
&lt;a href=&quot;/blog/nixieClockController&quot;&gt;Part 3&lt;/a&gt; describes the design of a circuit which controls the display using isolated control signals.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;nixie-tube-what-is-that&quot;&gt;&lt;strong&gt;Nixie Tube. What is that?&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img align=&quot;right&quot; src=&quot;/assets/images/single_tube.jpg&quot; alt=&quot;nixie clock&quot; height=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nixie tubes are Cold Cathode display tubes that light up when a high voltage is applied across them. The source of the illumination is electronic excitation and de-excitation. This mechanism is similar to the one used by more modern Neon Display tubes.&lt;/p&gt;

&lt;p&gt;Present day display technology, right from &lt;a href=&quot;https://www.electronics-tutorials.ws/blog/7-segment-display-tutorial.html&quot;&gt;7 segment displays&lt;/a&gt; to LCD screens work by making multiple independent sources light up in a synchronized manner. A Nixie tube is different in that it has the shapes of all digits 0-9 present as separate cathodes. The digit(s) corresponding to the grounded cathode lights up with a beautiful yellow color. For this reason, a typical Nixie tube has at least 12 pins. 10 Cathodes each for the digits 0-9, one cathode for a decimal point and 1 Anode.&lt;/p&gt;

&lt;p&gt;For more information on Nixie Tubes and their working see &lt;a href=&quot;https://www.explainthatstuff.com/how-nixie-tubes-work.html&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nixie Tubes were a leading digit display technology during the 1970s - 80s. Nowadays, these displays are admired and valued for their Retro (Classic) look. Nixie Tube clocks have been a popular hobby project for many years now. Most of these projects use rectified AC mains as their power source. They do so since, the tubes have a somewhat high operating voltage of (about) 170V DC. What makes our project unique is that it succeeds in powering up the Nixie Clock Display using only a single 5V USB power supply. To know more about how our power supply does this, see &lt;a href=&quot;/blog/nixieClockPower&quot;&gt;part 2&lt;/a&gt; of this series.&lt;/p&gt;

&lt;p&gt;The limitation of using USB as our power source lead to another challenge; the power available through the host Single Board Computers USB port is not enough to light up numerous Nixie Tube units simultaneously. Multiplexing is a solution commonly employed in displays to save on power. It works by rapidly turning display units on and off in sequence making sure that only a single one glows at a time. Multiplexing takes advantage of the persistence of human vision to make it seem like all displays are turned on at the same time.&lt;/p&gt;

&lt;p&gt;To check if the power budget problem could be overcome it was necessary to understand the I-V characteristics of the Nixie tubes. We had at our disposal, some now off-market, Nixie Tubes by &lt;a href=&quot;https://en.wikipedia.org/wiki/Bharat_Electronics_Limited&quot;&gt;Bharat Electronics Limited&lt;/a&gt; (BEL) which were loaned to us by our advisor &lt;a href=&quot;https://www.ee.iitb.ac.in/~mukul/&quot;&gt;Mukul Chandorkar&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;i--v-characteristics&quot;&gt;&lt;strong&gt;I- V characteristics&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img align=&quot;right&quot; src=&quot;/assets/images/figure2.png&quot; alt=&quot;nixie clock&quot; height=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the absence of available documentation on our BEL tubes, we performed our own characterization experiments which are described here. The I-V characteristics of the tubes were quite necessary for the design of our power supply. &lt;br /&gt; 
This is the case since the feasibility of powering the clock from a computers USB port must first be assessed. Moreover details like the peak current drawn are essential for the design of the transformer in the isolated power supply.&lt;/p&gt;

&lt;p&gt;The I-V characteristics for the digits 2 and 7 are shown to the right. Some observations here are-&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The current requirement at a particular operating voltage point varies slightly from digit to digit
    &lt;ul&gt;
      &lt;li&gt;This was expected due to physicial difference between the shapes of the two cathodes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The characteristics of the Nixie Tube are somewhat similar to that of a diode
    &lt;ul&gt;
      &lt;li&gt;Current picks up rapidly as voltage is increased and soon current starts to increase rapidly for small increases in voltage&lt;/li&gt;
      &lt;li&gt;This also highlights the importance of the presence of a series resistance while operating these tubes since there is no significant internal resistance&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This characterization was done using a full bridge rectifier, an &lt;a href=&quot;https://en.wikipedia.org/wiki/Autotransformer&quot;&gt;autotransformer&lt;/a&gt; connected to AC mains and a small circuit board with a filter capacitance, a capacitor discharge pathway (for when power is turned off, indicator LED also present) and a series resistance. Readers familiar with electronics would recognize this as the standard AC-DC conversion circuit. Two multimeters were used to act as voltmeter and ammeter.&lt;/p&gt;

&lt;h4 id=&quot;power-budgeting&quot;&gt;&lt;strong&gt;Power Budgeting&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;The voltage level available from USB is &lt;strong&gt;5V&lt;/strong&gt; as is well known. The maximum current that a single USB port can be expected to provide is &lt;strong&gt;500mA&lt;/strong&gt;. This caps the available power at approximately &lt;strong&gt;2.5W&lt;/strong&gt;. As seen in the previous section, a single tube draws about &lt;strong&gt;10mA&lt;/strong&gt; of current at &lt;strong&gt;150V&lt;/strong&gt; glowing very brightly, thus requiring &lt;strong&gt;1.5W&lt;/strong&gt; approximately. Hence as it can be seen, the there isn’t much margin for inefficiency in the design of the power supply, but designing one is certainly feasible.&lt;/p&gt;

&lt;h4 id=&quot;experiments-with-a-faulty-tube&quot;&gt;&lt;strong&gt;Experiments with a Faulty Tube&lt;/strong&gt;&lt;/h4&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/collate.png&quot; alt=&quot;I- V char&quot; height=&quot;300&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In an initial experiment we blew out the 0 digit of a Nixie Tube due to our faulty method of recording its I-V characteristics. We didn’t include with the tube a current limiting series resistor. This caused a current overload through the 0 digit cathode rendering it useless. This tube is referred to as partially faulty (PF).&lt;/p&gt;

&lt;p&gt;We thought it would be an interesting exercise to observe if a problem with one cathode affected the I-V characteristics of any other digit. Based on comparisons with the data from the correct tube mentioned above, and the plot on the right comparing I-V characteristics for digit 6, we can conclude that damage to one digit’s cathode does not affect the performance of other digits.&lt;/p&gt;

&lt;h4 id=&quot;hysterisis&quot;&gt;&lt;strong&gt;Hysterisis&lt;/strong&gt;&lt;/h4&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/hyst.png&quot; alt=&quot;Hyst1&quot; height=&quot;300&quot; /&gt;
&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/figure6.png&quot; alt=&quot;Hyst2&quot; height=&quot;300&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In addition to the forward I-V characteristics (Increasing voltage) we also performed retreating I-V characteristics. The retreating characteristics involved decreasing the voltage down from the highest V reading to the turn off voltage. We were inclined to document this behaviour since the tubes were seen showing &lt;a href=&quot;https://en.wikipedia.org/wiki/Hysteresis&quot;&gt;Hysteresis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This means that the current requirement for a particular digit can be different depending on whether we are moving forward from the turn on voltage or decreasing the voltage applied. That being said, the current difference is quite low, in the (μA) range.&lt;/p&gt;

&lt;h4 id=&quot;precious-tubes-need-holders&quot;&gt;&lt;strong&gt;Precious Tubes need Holders&lt;/strong&gt;&lt;/h4&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/holders.png&quot; alt=&quot;holders schematic&quot; height=&quot;300&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;Nixie Tubes are something of a novelty. So to keep the option of using these tubes in another project open, we wanted to make them socketable. On failing to find a viable off the shelf solution we decided to design our own tube holders as small PCBs with pin heads plugging onto the main controller board. The design is pictured above and the real life finished product is pictured below.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/tube_holder.jpg&quot; alt=&quot;holders&quot; height=&quot;200&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Some of the tubes are noticeably bent and crooked on these holders. The reason for this was that the legs of the tubes were quite fragile and even a small amount of strain to the leg-glass joint could potentially break the terminal off. So, after breaking a leg on one of our spare tubes, we didn’t try bending the legs of any of the tubes.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;This project was completed in partial fulfilment of the requirements for EE 344: Electronic Design Lab at IITB&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;A more detailed description of the project along with schematics can be found in our &lt;a href=&quot;/assets/docs/DD08_Design_Lab_report.pdf&quot;&gt;project report&lt;/a&gt;&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;A demonstration of our project can be &lt;a href=&quot;https://youtu.be/MN-FbMPmbiw&quot;&gt;found here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Digital Video Stabilization</title><link href="http://localhost:4000/research/videoStab" rel="alternate" type="text/html" title="Digital Video Stabilization" /><published>2020-06-04T00:00:00+05:30</published><updated>2020-06-04T00:00:00+05:30</updated><id>http://localhost:4000/research/scriptTest%20(copy)</id><content type="html" xml:base="http://localhost:4000/research/videoStab">&lt;p&gt;Mechanical stabilization is well known. There external equipment such as camera gimblas and other apparatus are used to filter out vibrations. However, the capability of such equipment is limited to prventing high frequency vibrations from entering camera footage.
To tackle low frequency vibrations arising from actions such as walking and or running while recording video footage.&lt;/p&gt;

&lt;p&gt;Stages of digital Video stabilization-&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Motions estimation: Transformation parameters between 2 consecutive frames are derived&lt;/li&gt;
  &lt;li&gt;Motion smoothing: Filtering out unwanted motion - Part where we generate the filter&lt;/li&gt;
  &lt;li&gt;Image composition: Reconstruction of a stabilized video&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;video-stabilisation-using-feature-points&quot;&gt;Video Stabilisation using feature points&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Track a few feature points between consecutive frames&lt;/li&gt;
  &lt;li&gt;Tracked features allow us to estimate the motion between subsequrnt frames and subsequently correct for it&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;paramteric-linear-motion-models&quot;&gt;Paramteric Linear Motion Models&lt;/h4&gt;
&lt;p&gt;What should be the transform that facillitates the application of a motion model
Heirarchy of transforms from computer vision&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Homography&lt;/li&gt;
  &lt;li&gt;Affine&lt;/li&gt;
  &lt;li&gt;Euclidean (length preserving)&lt;/li&gt;
  &lt;li&gt;Translation
For the purpose of video stabilization, a&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;l1-optimal-camera-paths-paper-implementation-details&quot;&gt;L1 optimal camera paths paper implementation details&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Paper focusses exclusively on 2D motion models (which is fair I guess)&lt;/li&gt;
  &lt;li&gt;Can compare sparse optical flow (good when sharp features are avaiable) and dense optical flow (good when smooth features are present), both are implemented in openCV &lt;a href=&quot;https://docs.opencv.org/3.3.1/d7/d8b/tutorial_py_lucas_kanade.html&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;In the paper they have gone for the sparse optical flow method&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Mechanical stabilization is well known. There external equipment such as camera gimblas and other apparatus are used to filter out vibrations. However, the capability of such equipment is limited to prventing high frequency vibrations from entering camera footage. To tackle low frequency vibrations arising from actions such as walking and or running while recording video footage.</summary></entry><entry><title type="html">scriptTest</title><link href="http://localhost:4000/blog/scriptTest" rel="alternate" type="text/html" title="scriptTest" /><published>2020-06-04T00:00:00+05:30</published><updated>2020-06-04T00:00:00+05:30</updated><id>http://localhost:4000/blog/scriptTest</id><content type="html" xml:base="http://localhost:4000/blog/scriptTest">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;R12/Ishank Juneja/16D070012&lt;/title&gt;
  &lt;style type=&quot;text/css&quot;&gt;code{white-space: pre;}&lt;/style&gt;
  &lt;script src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_CHTML-full&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id=&quot;header&quot;&gt;
&lt;h1 class=&quot;title&quot;&gt;R12/Ishank Juneja/16D070012&lt;/h1&gt;
&lt;/div&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Under the classic Markov Decision Process (MDP) setup, we associate a tuple &lt;span class=&quot;math inline&quot;&gt;\((S, A, T, R)\)&lt;/span&gt; with every MDP. In this notation, &lt;span class=&quot;math inline&quot;&gt;\(S\)&lt;/span&gt; is the set of states the agent can take, &lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt; is the set of possible actions for the agent, &lt;span class=&quot;math inline&quot;&gt;\(T:S \times A \rightarrow \Pi(s)\)&lt;/span&gt; is the state transition function of the problem. &lt;span class=&quot;math inline&quot;&gt;\(T\)&lt;/span&gt; specifies the probability distribution over next states &lt;span class=&quot;math inline&quot;&gt;\(s&amp;#39; \in S\)&lt;/span&gt; on taking an action &lt;span class=&quot;math inline&quot;&gt;\(a \in A\)&lt;/span&gt; starting from state &lt;span class=&quot;math inline&quot;&gt;\(s \in S\)&lt;/span&gt;. &lt;span class=&quot;math inline&quot;&gt;\(R\)&lt;/span&gt; is the reward function which can be viewed as a feedback on agent performance from the environment. An assumption implicit to this model is the observability of state &lt;span class=&quot;math inline&quot;&gt;\(s \in S\)&lt;/span&gt;. Often times, it is not the case that an agent has access to its exact state. Instead, the agent might only have access to an observation &lt;span class=&quot;math inline&quot;&gt;\(o \in \Omega\)&lt;/span&gt; which captures incomplete information about its underlying state. This framework satisfactorily models many practical situations. For instance, consider a robot that is attempting to localize its position (directly unobservable state &lt;span class=&quot;math inline&quot;&gt;\(s\)&lt;/span&gt;) in a multi-storied building by merely looking at a particular intersection in a corridor (observation &lt;span class=&quot;math inline&quot;&gt;\(o\)&lt;/span&gt;). Partially Observable MDPs (POMDPs) provide a richer mathematical framework which is able to describe many such situations.&lt;/p&gt;
&lt;h2 id=&quot;the-pomdp-framework&quot; class=&quot;unnumbered&quot;&gt;The POMDP Framework&lt;/h2&gt;
&lt;p&gt;A POMDP is completely described by the tuple &lt;span class=&quot;math inline&quot;&gt;\((S, A, T, R, \Omega, O)\)&lt;/span&gt;, where&lt;br /&gt;
&lt;span class=&quot;math inline&quot;&gt;\((S, A, T, R)\)&lt;/span&gt; is the underlying MDP, &lt;span class=&quot;math inline&quot;&gt;\(\Omega\)&lt;/span&gt; is a finite set of observations the agent can experience and &lt;span class=&quot;math inline&quot;&gt;\(O:S \times A \rightarrow \Pi(\Omega)\)&lt;/span&gt; is the observation function which gives, for every state and action, a probability distribution over possible observations. Under the POMDP framework an agent is unable to discern its state accurately. Instead of the true state, the agent makes “an observation” &lt;span class=&quot;math inline&quot;&gt;\(o\)&lt;/span&gt; based on the action &lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt; taken and the (still unobserved) resulting state &lt;span class=&quot;math inline&quot;&gt;\(s&amp;#39;\)&lt;/span&gt;.&lt;br /&gt;
An implication of this limitation is that an agent wishing to act optimally must use its memory of all previous actions and observations. To simplify the problem, the POMDP model introduces a &lt;em&gt;belief state&lt;/em&gt; &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt;. Belief states are probability distributions over the true underlying states of the agent. That is, for each state &lt;span class=&quot;math inline&quot;&gt;\(s\)&lt;/span&gt;, &lt;span class=&quot;math inline&quot;&gt;\(b(s)\)&lt;/span&gt; gives the probability of the agent being in that state. By design, the agents belief state at any point of time is a sufficient statistic (SS) for all its previous experience. As a SS, the belief states capture all the past observations and the belief state that the agent started with. Sequential decision-making in the POMDP becomes Markovian in belief state &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt; due to the SS property.&lt;br /&gt;
To compute and update belief states as new experience is accumulated, the agent includes a block known as the state-estimator (SE). More precisely, given an observation &lt;span class=&quot;math inline&quot;&gt;\(o\)&lt;/span&gt;, the action taken &lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt; and the previous belief state &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt;, the SE is the function SE&lt;span class=&quot;math inline&quot;&gt;\((b, a, o)\)&lt;/span&gt; which outputs the new belief state &lt;span class=&quot;math inline&quot;&gt;\(b&amp;#39;\)&lt;/span&gt;. Using the rules of conditional probability and the definitions of the POMDP parameters, the paper derives the relation &lt;span class=&quot;math display&quot;&gt;\[b&amp;#39;(s&amp;#39;) \propto O(s&amp;#39;, a, o)\sum_{s \in S}T(s, a, s&amp;#39;)b(s),\]&lt;/span&gt; where the probabilities in &lt;span class=&quot;math inline&quot;&gt;\(b&amp;#39;\)&lt;/span&gt; are computed using the constraint &lt;span class=&quot;math inline&quot;&gt;\(\sum_{s \in S}b(s) = 1\)&lt;/span&gt;.&lt;br /&gt;
The other necessary component to describe a POMDP agent is the policy being followed by it. In the POMDP framework, a policy maps a belief state vector &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt; to an action &lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt;. Since the problem is Markovian in the belief state &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt;, obtaining a policy through POMDP planning is equivalent to solving the planning problem for an associated &lt;strong&gt;belief MDP&lt;/strong&gt;.&lt;br /&gt;
The parameters for the belief MDP are described below,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(\mathcal{B}\)&lt;/span&gt; is the set of possible belief states and forms the state space&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The set of actions &lt;span class=&quot;math inline&quot;&gt;\(A\)&lt;/span&gt; remains the same as the POMDP&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(\tau(b,a,b&amp;#39;)\)&lt;/span&gt; is the state-transition function which can be computed using the POMDP parameters&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(\rho(b, a)\)&lt;/span&gt; is the reward function and is given by an expectation over the reward function &lt;span class=&quot;math inline&quot;&gt;\(R(s, a)\)&lt;/span&gt; under the distribution over states given by &lt;span class=&quot;math inline&quot;&gt;\(b(s)\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;planning-for-pomdps&quot; class=&quot;unnumbered&quot;&gt;Planning for POMDPs&lt;/h2&gt;
&lt;p&gt;It is often intractable to solve the planning problem for continuous state MDPs, however the special structure of the belief MDP lends it properties that give rise to efficient planning algorithms. In this paper the authors focus primarily on two planning approaches - &lt;strong&gt;Exhaustive Enumeration and Witness Algorithm&lt;/strong&gt; the latter among which is a novel approach. Both methods provide a means to determine the optimal &lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt; - step value function &lt;span class=&quot;math inline&quot;&gt;\(V_t\)&lt;/span&gt; given a start belief state &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt;. Here &lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt; - step refers to the situation where there are only &lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt; steps remaining in the agents lifetime. The paper considers the more general finite horizon problem since an infinite horizon discounted trajectory can always be approximated to arbitrary precision by a long enough finite trajectory. Lastly, once the optimal value function is computed using Value-Iteration, it is a straightforward task to determine the optimal policy to complete planning.&lt;br /&gt;
Next, the paper describes how a &lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt;-step policy can be represented using a &lt;em&gt;policy tree&lt;/em&gt; - &lt;span class=&quot;math inline&quot;&gt;\(p\)&lt;/span&gt; of depth &lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt;. An expression for the expected return &lt;span class=&quot;math inline&quot;&gt;\(V_p(s)\)&lt;/span&gt; associated with executing the policy &lt;span class=&quot;math inline&quot;&gt;\(p\)&lt;/span&gt;, starting from a state &lt;span class=&quot;math inline&quot;&gt;\(s\)&lt;/span&gt;, can be derived using the belief MDP parameters. However, the actual quantity of interest is the return for a given &lt;em&gt;belief state&lt;/em&gt; &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt;. Using the linearity of expectations we have, &lt;span class=&quot;math inline&quot;&gt;\(V_p(b) = \sum_{s \in S} b(s) V_p(s)\)&lt;/span&gt;. Treating &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt; and &lt;span class=&quot;math inline&quot;&gt;\(V_p\)&lt;/span&gt; as vectors of length &lt;span class=&quot;math inline&quot;&gt;\(|S|\)&lt;/span&gt;, &lt;span class=&quot;math inline&quot;&gt;\(V_p\)&lt;/span&gt; becomes a dot product.&lt;br /&gt;
The objective of planning through value-iteration is to obtain &lt;span class=&quot;math display&quot;&gt;\[V_t(b) = \max_{p \in \mathcal{P}} b \cdot V_p.\]&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;pruning-the-search-space&quot; class=&quot;unnumbered&quot;&gt;Pruning the Search space&lt;/h3&gt;
&lt;p&gt;Using geometrical arguments the authors were able to show that the optimal value function &lt;span class=&quot;math inline&quot;&gt;\(V_t\)&lt;/span&gt; is piecewise linear and convex. Such a &lt;span class=&quot;math inline&quot;&gt;\(V_t\)&lt;/span&gt; induces a partition on the space of possible belief states such that for every &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt; there exists an optimal policy tree. While iterating over value functions, we would be much better of if our search space were as compact as possible. To do achieve this, we keep only &lt;em&gt;useful&lt;/em&gt; policy trees and prune way the others. A policy tree &lt;span class=&quot;math inline&quot;&gt;\(p&amp;#39;\)&lt;/span&gt; is considered useful if its value function &lt;span class=&quot;math inline&quot;&gt;\(V_{p&amp;#39;}\)&lt;/span&gt; is such that it cannot be dominated everywhere by the maximum of the value functions of any subset of &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{P}\)&lt;/span&gt;. A possible way of ensuring that we have a minimal subset is to ensure that for every policy, there is at least one point in the state space where its own value function dominates. Once a minimal representation (set of policies) &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{V}_t\)&lt;/span&gt; for the optimal value function &lt;span class=&quot;math inline&quot;&gt;\(V_t\)&lt;/span&gt; is obtained, value iteration (VI) can be applied to the problem in a manner identical to that of VI for &lt;strong&gt;discrete&lt;/strong&gt; MDPs.&lt;br /&gt;
The only problem left to be solved then is that of obtaining a minimal representation of the &lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt; step optimal value function given a minimal representation of the &lt;span class=&quot;math inline&quot;&gt;\(t-1\)&lt;/span&gt; step value function &lt;span class=&quot;math inline&quot;&gt;\(V_{t-1}\)&lt;/span&gt;. The next two algorithms achieve this.&lt;/p&gt;
&lt;h3 id=&quot;exhaustive-enumeration&quot; class=&quot;unnumbered&quot;&gt;Exhaustive Enumeration&lt;/h3&gt;
&lt;p&gt;This algorithm works by constructing a superset &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{V}_t^{+}\)&lt;/span&gt; of the minimal set and then pruning it down to &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{V}_t\)&lt;/span&gt;. The algorithm can be broken down into two steps - generation and pruning. To generate the superset &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{V}_t^{+}\)&lt;/span&gt;, we only need to consider the policy trees contained in &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{V}_{t-1}\)&lt;/span&gt; since a policy with a non-useful subtree cannot itself be useful. This means that the superset will contain &lt;span class=&quot;math inline&quot;&gt;\(|A||\mathcal{V}_{t-1}|^{\Omega}\)&lt;/span&gt; elements.&lt;br /&gt;
To prune the superset, we can identify the optimal parent &lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt; length policy for each &lt;span class=&quot;math inline&quot;&gt;\(t-1\)&lt;/span&gt; length sub-policy using linear programming. For this we would need to compute the value functions for each of the policy trees in &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{V}_t^{+}\)&lt;/span&gt;. This can be done efficiently using the value functions of the sub-trees.&lt;br /&gt;
The main drawback of this approach is that we need to go through the superset &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{V}_t^{+}\)&lt;/span&gt; which has a size exponential in the number of possible observations &lt;span class=&quot;math inline&quot;&gt;\(|\Omega|\)&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id=&quot;witness-algorithm---authors-novel-approach&quot; class=&quot;unnumbered&quot;&gt;Witness Algorithm - Authors’ Novel Approach&lt;/h3&gt;
&lt;p&gt;Instead of computing &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{V}_t\)&lt;/span&gt; directly, the witness algorithm computes a set &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{Q}_t^{a}\)&lt;/span&gt; for every action &lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt;. &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{Q}_t^{a}\)&lt;/span&gt; represents the set of all &lt;span class=&quot;math inline&quot;&gt;\(t\)&lt;/span&gt; step policy trees with the action &lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt; at their root. The set &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{V}_t\)&lt;/span&gt; is then computed by pruning the union of such policies trees - &lt;span class=&quot;math inline&quot;&gt;\(\cup_a \mathcal{Q}_t^{a}\)&lt;/span&gt;. The job of the witness algorithm is to provide an &lt;em&gt;efficient&lt;/em&gt; technique to compute &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{Q}_t^{a}\)&lt;/span&gt;. In particular the authors show that their algorithm has complexity polynomial in &lt;span class=&quot;math inline&quot;&gt;\(|S|,|A|,|\Omega|,|\mathcal{V}_{t-1}|\)&lt;/span&gt; and &lt;span class=&quot;math inline&quot;&gt;\(|\mathcal{Q}_t^{a}|\)&lt;/span&gt;. A caveat here is that &lt;span class=&quot;math inline&quot;&gt;\(|\mathcal{Q}_t^{a}|\)&lt;/span&gt; can be exponentially larger than the size of &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{V}_t\)&lt;/span&gt;.&lt;br /&gt;
The core of the witness algorithm lies in its pruning technique. The algorithm starts of with a single policy tree optimal for some arbitrary belief state &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt;. Then we check if there exists a belief state &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt; for which the &lt;span class=&quot;math inline&quot;&gt;\(Q\)&lt;/span&gt; value estimated using our current set of trees - &lt;span class=&quot;math inline&quot;&gt;\(\hat{\mathcal{Q}}_{t}^{a}(b)\)&lt;/span&gt; is less than the true &lt;span class=&quot;math inline&quot;&gt;\(Q\)&lt;/span&gt; value given by &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{Q}_{t}^{a}(b)\)&lt;/span&gt;. Such a &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt; is said to serve as a &lt;em&gt;witness&lt;/em&gt; to the fact that our current collection of policy trees is incomplete. Once such a witness is identified, the algorithm appends the policy, with action &lt;span class=&quot;math inline&quot;&gt;\(a\)&lt;/span&gt; at the root, that yields the best value for the earlier chosen belief state &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt;. This process continues until no more witness points exist and we conclude that our representation of &lt;span class=&quot;math inline&quot;&gt;\(Q\)&lt;/span&gt; is perfect. Since the belief space is continuous, the search for witnesses &lt;span class=&quot;math inline&quot;&gt;\(b\)&lt;/span&gt; is achieved using linear programming.&lt;br /&gt;
The witness algorithm fails to perform well on problems where &lt;span class=&quot;math inline&quot;&gt;\(|\mathcal{Q}_t^{a}|\)&lt;/span&gt; is “not polynomial&amp;quot;. In such situations the authors point to other algorithms such as the briefly described &lt;em&gt;linear support algorithm&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;obtaining-a-minimal-finite-state-controller&quot; class=&quot;unnumbered&quot;&gt;Obtaining a Minimal Finite State Controller&lt;/h2&gt;
&lt;p&gt;For some special POMDP problems, the optimal policy trees have the property that the observation-action mapping at every level remains the same. In such situations the policy becomes stationary and can be represented as a more compact plan-graph. The way a plan graph is created, on every step an agent could start of in the node optimal for its initial belief state and thereafter simply make observations and follow the arc associated with the observation to the next node. This picture is essentially that of a finite state controller which uses the minimal possible amount of memory to act optimally in a POMDP environment. As the paper points out, it is fascinating that the POMDP problem started off as a discrete problem, was converted to a continuous belief space and at the end the continuous solution could again be mapped back to a discrete controller.&lt;br /&gt;
Some questions I have are -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What exactly is the efficient pruning strategy for obtaining the minimal useful set &lt;span class=&quot;math inline&quot;&gt;\(\mathcal{V}\)&lt;/span&gt; of policy trees? It seemed to me that we can’t do without ensuring that every policy we throw out does not dominate all other policies for some &lt;span class=&quot;math inline&quot;&gt;\(b \in \mathcal{B}\)&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the description of the witness algorithm (WA), the authors claim that the running time of WA is polynomial if &lt;span class=&quot;math inline&quot;&gt;\(|\mathcal{Q}_t^{a}|\)&lt;/span&gt; is polynomial. What is meant by the latter being polynomial? What problem parameters are being refereed to?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">R12/Ishank Juneja/16D070012 R12/Ishank Juneja/16D070012 Introduction Under the classic Markov Decision Process (MDP) setup, we associate a tuple \((S, A, T, R)\) with every MDP. In this notation, \(S\) is the set of states the agent can take, \(A\) is the set of possible actions for the agent, \(T:S \times A \rightarrow \Pi(s)\) is the state transition function of the problem. \(T\) specifies the probability distribution over next states \(s&amp;#39; \in S\) on taking an action \(a \in A\) starting from state \(s \in S\). \(R\) is the reward function which can be viewed as a feedback on agent performance from the environment. An assumption implicit to this model is the observability of state \(s \in S\). Often times, it is not the case that an agent has access to its exact state. Instead, the agent might only have access to an observation \(o \in \Omega\) which captures incomplete information about its underlying state. This framework satisfactorily models many practical situations. For instance, consider a robot that is attempting to localize its position (directly unobservable state \(s\)) in a multi-storied building by merely looking at a particular intersection in a corridor (observation \(o\)). Partially Observable MDPs (POMDPs) provide a richer mathematical framework which is able to describe many such situations. The POMDP Framework A POMDP is completely described by the tuple \((S, A, T, R, \Omega, O)\), where \((S, A, T, R)\) is the underlying MDP, \(\Omega\) is a finite set of observations the agent can experience and \(O:S \times A \rightarrow \Pi(\Omega)\) is the observation function which gives, for every state and action, a probability distribution over possible observations. Under the POMDP framework an agent is unable to discern its state accurately. Instead of the true state, the agent makes “an observation” \(o\) based on the action \(a\) taken and the (still unobserved) resulting state \(s&amp;#39;\). An implication of this limitation is that an agent wishing to act optimally must use its memory of all previous actions and observations. To simplify the problem, the POMDP model introduces a belief state \(b\). Belief states are probability distributions over the true underlying states of the agent. That is, for each state \(s\), \(b(s)\) gives the probability of the agent being in that state. By design, the agents belief state at any point of time is a sufficient statistic (SS) for all its previous experience. As a SS, the belief states capture all the past observations and the belief state that the agent started with. Sequential decision-making in the POMDP becomes Markovian in belief state \(b\) due to the SS property. To compute and update belief states as new experience is accumulated, the agent includes a block known as the state-estimator (SE). More precisely, given an observation \(o\), the action taken \(a\) and the previous belief state \(b\), the SE is the function SE\((b, a, o)\) which outputs the new belief state \(b&amp;#39;\). Using the rules of conditional probability and the definitions of the POMDP parameters, the paper derives the relation \[b&amp;#39;(s&amp;#39;) \propto O(s&amp;#39;, a, o)\sum_{s \in S}T(s, a, s&amp;#39;)b(s),\] where the probabilities in \(b&amp;#39;\) are computed using the constraint \(\sum_{s \in S}b(s) = 1\). The other necessary component to describe a POMDP agent is the policy being followed by it. In the POMDP framework, a policy maps a belief state vector \(b\) to an action \(a\). Since the problem is Markovian in the belief state \(b\), obtaining a policy through POMDP planning is equivalent to solving the planning problem for an associated belief MDP. The parameters for the belief MDP are described below, \(\mathcal{B}\) is the set of possible belief states and forms the state space The set of actions \(A\) remains the same as the POMDP \(\tau(b,a,b&amp;#39;)\) is the state-transition function which can be computed using the POMDP parameters \(\rho(b, a)\) is the reward function and is given by an expectation over the reward function \(R(s, a)\) under the distribution over states given by \(b(s)\) Planning for POMDPs It is often intractable to solve the planning problem for continuous state MDPs, however the special structure of the belief MDP lends it properties that give rise to efficient planning algorithms. In this paper the authors focus primarily on two planning approaches - Exhaustive Enumeration and Witness Algorithm the latter among which is a novel approach. Both methods provide a means to determine the optimal \(t\) - step value function \(V_t\) given a start belief state \(b\). Here \(t\) - step refers to the situation where there are only \(t\) steps remaining in the agents lifetime. The paper considers the more general finite horizon problem since an infinite horizon discounted trajectory can always be approximated to arbitrary precision by a long enough finite trajectory. Lastly, once the optimal value function is computed using Value-Iteration, it is a straightforward task to determine the optimal policy to complete planning. Next, the paper describes how a \(t\)-step policy can be represented using a policy tree - \(p\) of depth \(t\). An expression for the expected return \(V_p(s)\) associated with executing the policy \(p\), starting from a state \(s\), can be derived using the belief MDP parameters. However, the actual quantity of interest is the return for a given belief state \(b\). Using the linearity of expectations we have, \(V_p(b) = \sum_{s \in S} b(s) V_p(s)\). Treating \(b\) and \(V_p\) as vectors of length \(|S|\), \(V_p\) becomes a dot product. The objective of planning through value-iteration is to obtain \[V_t(b) = \max_{p \in \mathcal{P}} b \cdot V_p.\] Pruning the Search space Using geometrical arguments the authors were able to show that the optimal value function \(V_t\) is piecewise linear and convex. Such a \(V_t\) induces a partition on the space of possible belief states such that for every \(b\) there exists an optimal policy tree. While iterating over value functions, we would be much better of if our search space were as compact as possible. To do achieve this, we keep only useful policy trees and prune way the others. A policy tree \(p&amp;#39;\) is considered useful if its value function \(V_{p&amp;#39;}\) is such that it cannot be dominated everywhere by the maximum of the value functions of any subset of \(\mathcal{P}\). A possible way of ensuring that we have a minimal subset is to ensure that for every policy, there is at least one point in the state space where its own value function dominates. Once a minimal representation (set of policies) \(\mathcal{V}_t\) for the optimal value function \(V_t\) is obtained, value iteration (VI) can be applied to the problem in a manner identical to that of VI for discrete MDPs. The only problem left to be solved then is that of obtaining a minimal representation of the \(t\) step optimal value function given a minimal representation of the \(t-1\) step value function \(V_{t-1}\). The next two algorithms achieve this. Exhaustive Enumeration This algorithm works by constructing a superset \(\mathcal{V}_t^{+}\) of the minimal set and then pruning it down to \(\mathcal{V}_t\). The algorithm can be broken down into two steps - generation and pruning. To generate the superset \(\mathcal{V}_t^{+}\), we only need to consider the policy trees contained in \(\mathcal{V}_{t-1}\) since a policy with a non-useful subtree cannot itself be useful. This means that the superset will contain \(|A||\mathcal{V}_{t-1}|^{\Omega}\) elements. To prune the superset, we can identify the optimal parent \(t\) length policy for each \(t-1\) length sub-policy using linear programming. For this we would need to compute the value functions for each of the policy trees in \(\mathcal{V}_t^{+}\). This can be done efficiently using the value functions of the sub-trees. The main drawback of this approach is that we need to go through the superset \(\mathcal{V}_t^{+}\) which has a size exponential in the number of possible observations \(|\Omega|\). Witness Algorithm - Authors’ Novel Approach Instead of computing \(\mathcal{V}_t\) directly, the witness algorithm computes a set \(\mathcal{Q}_t^{a}\) for every action \(a\). \(\mathcal{Q}_t^{a}\) represents the set of all \(t\) step policy trees with the action \(a\) at their root. The set \(\mathcal{V}_t\) is then computed by pruning the union of such policies trees - \(\cup_a \mathcal{Q}_t^{a}\). The job of the witness algorithm is to provide an efficient technique to compute \(\mathcal{Q}_t^{a}\). In particular the authors show that their algorithm has complexity polynomial in \(|S|,|A|,|\Omega|,|\mathcal{V}_{t-1}|\) and \(|\mathcal{Q}_t^{a}|\). A caveat here is that \(|\mathcal{Q}_t^{a}|\) can be exponentially larger than the size of \(\mathcal{V}_t\). The core of the witness algorithm lies in its pruning technique. The algorithm starts of with a single policy tree optimal for some arbitrary belief state \(b\). Then we check if there exists a belief state \(b\) for which the \(Q\) value estimated using our current set of trees - \(\hat{\mathcal{Q}}_{t}^{a}(b)\) is less than the true \(Q\) value given by \(\mathcal{Q}_{t}^{a}(b)\). Such a \(b\) is said to serve as a witness to the fact that our current collection of policy trees is incomplete. Once such a witness is identified, the algorithm appends the policy, with action \(a\) at the root, that yields the best value for the earlier chosen belief state \(b\). This process continues until no more witness points exist and we conclude that our representation of \(Q\) is perfect. Since the belief space is continuous, the search for witnesses \(b\) is achieved using linear programming. The witness algorithm fails to perform well on problems where \(|\mathcal{Q}_t^{a}|\) is “not polynomial&amp;quot;. In such situations the authors point to other algorithms such as the briefly described linear support algorithm. Obtaining a Minimal Finite State Controller For some special POMDP problems, the optimal policy trees have the property that the observation-action mapping at every level remains the same. In such situations the policy becomes stationary and can be represented as a more compact plan-graph. The way a plan graph is created, on every step an agent could start of in the node optimal for its initial belief state and thereafter simply make observations and follow the arc associated with the observation to the next node. This picture is essentially that of a finite state controller which uses the minimal possible amount of memory to act optimally in a POMDP environment. As the paper points out, it is fascinating that the POMDP problem started off as a discrete problem, was converted to a continuous belief space and at the end the continuous solution could again be mapped back to a discrete controller. Some questions I have are - What exactly is the efficient pruning strategy for obtaining the minimal useful set \(\mathcal{V}\) of policy trees? It seemed to me that we can’t do without ensuring that every policy we throw out does not dominate all other policies for some \(b \in \mathcal{B}\). In the description of the witness algorithm (WA), the authors claim that the running time of WA is polynomial if \(|\mathcal{Q}_t^{a}|\) is polynomial. What is meant by the latter being polynomial? What problem parameters are being refereed to?</summary></entry><entry><title type="html">Webpage Setup using Jekyll</title><link href="http://localhost:4000/blog/pageSetupJekyll" rel="alternate" type="text/html" title="Webpage Setup using Jekyll" /><published>2020-05-24T00:00:00+05:30</published><updated>2020-05-24T00:00:00+05:30</updated><id>http://localhost:4000/blog/webpage-setup</id><content type="html" xml:base="http://localhost:4000/blog/pageSetupJekyll">&lt;p&gt;This post illustrates how to get a Jekyll static site up and running with some useful add-ons and tips. Rather than be a self contained post, this serves as more of a collection of pointers to other useful resources around the internet that when taken together get the job done.&lt;br /&gt;
The tutorial and linked instructions assume a linux system with a &lt;em&gt;bash shell&lt;/em&gt; available. Further familiarity with creating content for the Web with &lt;a href=&quot;https://www.markdownguide.org/getting-started/&quot;&gt;Markdown&lt;/a&gt; is assumed.&lt;/p&gt;

&lt;h4 id=&quot;lift-off&quot;&gt;&lt;strong&gt;Lift Off!&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;When starting off making a personal webpage with Jekyll, the first place one might end up is the &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;official website&lt;/a&gt;. The Jekyll documentation is great for understanding its more advanced features but I found, &lt;a href=&quot;https://www.taniarascia.com/make-a-static-website-with-jekyll/&quot;&gt;this post&lt;/a&gt; to be a much more self contained tutorial to getting a webpage up and running. In particular the official Jekyll documentation misses out on some of the details of creating some so called ‘gemfiles’ within the folder structure.&lt;/p&gt;

&lt;p&gt;After completing the procedure in the linked tutorial, the directory structure we get looks as follows-&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── 404.html
├── about.md
├── _config.yml
├── feed.xml
├── Gemfile
├── Gemfile.lock
├── index.md
├── _posts
│   └── 2019-07-16-welcome-to-jekyll.markdown
└── _site
    ├── 404.html
    ├── about
    │   └── index.html
    ├── assets
    │   ├── main.css
    │   └── minima-social-icons.svg
    ├── feed.xml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you might gather from following the linked tutorial, when we run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; (or just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; on some systems) in the outermost directory containing our project, a rendering of our webpage on the local URL &lt;a href=&quot;http://127.0.0.1:4000&quot;&gt;http://127.0.0.1:4000&lt;/a&gt; becomes avaiable. Or when we run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll build&lt;/code&gt;, the finished webpage (or rather collection of pages) is placed into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; directory from which it could be deployed onto our preferred web server. &lt;br /&gt;
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; directory is the finished product in some sense, so any changes made directly to the contents of this direcotry are pointless since these would be overwritten during the next compilation.&lt;/p&gt;

&lt;h4 id=&quot;deploying-in-the-wild&quot;&gt;&lt;strong&gt;Deploying in the Wild&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Usually when a jekyll based blog/webpage is setup, it is done on our own free &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git-Hub-user-name.github.io&lt;/code&gt; domain name using &lt;a href=&quot;https://pages.github.com/&quot;&gt;github pages&lt;/a&gt;, in which case we don’t need to worry about deploying the contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; ourselves, since github does that for us automatically when we push the entire outer directory and any subsequent changes to it to a specially named remote.&lt;/p&gt;

&lt;p&gt;Other than &lt;a href=&quot;https://pages.github.com/&quot;&gt;github pages&lt;/a&gt;, I also have experience with hosting a website on my university &lt;a href=&quot;http://home.iitb.ac.in/~ishankjuneja/&quot;&gt;academic homepage&lt;/a&gt;. In our universities case, students are allocated 1 GB of space on the &lt;a href=&quot;http://home.iitb.ac.in/&quot;&gt;BigHome&lt;/a&gt; cloud service. Also each student gets a domain name of the form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://home.iitb.ac.in/~LDAPuserName&lt;/code&gt;. The &lt;a href=&quot;https://www.cc.iitb.ac.in/page/personalwebpage&quot;&gt;procedure&lt;/a&gt; to make a student webpage work there is as follows&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Login on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://home.iitb.ac.in/&lt;/code&gt; using your LDAP ID&lt;/li&gt;
  &lt;li&gt;Create a repository named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public_html&lt;/code&gt; onto your drive space&lt;/li&gt;
  &lt;li&gt;Place the contents of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; directory compiled by Jekyll into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public_html&lt;/code&gt; repository and you’re done&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the case of my university homepage I had some trouble making sense of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base_url&lt;/code&gt; field appearing in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file. The StackOverflow question I &lt;a href=&quot;https://stackoverflow.com/questions/52680191/forced-to-use-absolute-urls-in-jekyll&quot;&gt;asked here&lt;/a&gt; would clear up how the fields have to be set.&lt;/p&gt;

&lt;h4 id=&quot;creating-and-placing-markdown-files&quot;&gt;&lt;strong&gt;Creating and Placing Markdown Files&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;The first page a visitor would see when they arrive at your website would be the contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.md&lt;/code&gt; Under the minima template the top right corner would contain links to pages rendered using any and every markdown file present in either the outermost project directory, in any specially named directory for instance, one called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pages&lt;/code&gt;. Every other webpage, (blog posts, or any other format) should appear either inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory or any of its sub-directories (and so on recursively). Note that all markdown files present inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; must be named using the format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-file-name&lt;/code&gt;, else the files won’t show up in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; finished product and by extension, will not be accessible from your website. Any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; markdown files present anywhere outside of this prescribed template will be treated like a new page and would be added to the upper right corner navigation pane.&lt;/p&gt;

&lt;p&gt;Under the default &lt;em&gt;minima&lt;/em&gt; template, there are two options as far as the layout of a webpage generatred using a markdown file is concerned - &lt;strong&gt;post&lt;/strong&gt; and &lt;strong&gt;page&lt;/strong&gt;. To me the difference between the two seems very minor with the post layout having an automatic date stamp at the top of the rendered document and the page layout (somewhat fortunately) lacking such a date feature. Note that the default behaviour of these templates can be changed or new templates to replace them can be created as explained in the section on overriding themes explains.&lt;/p&gt;

&lt;h4 id=&quot;customizing-urls-using-permalinks&quot;&gt;&lt;strong&gt;Customizing URLs using Permalinks&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Another useful jekyll feature is that of &lt;em&gt;permalinks&lt;/em&gt;. By default, jekyll parses your file name for its date to create a URL, for instance, by default, the URL of this page would have been &lt;br /&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://ishank-juneja.github.io/2020/05/24/webpage-setup.html&lt;/code&gt;. If you, like me, find such a URL aesthetically displeasing, then you might want to look into &lt;a href=&quot;https://www.youtube.com/watch?v=938jDG_YPdc&quot;&gt;permalinks&lt;/a&gt; in Jekyll.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The title, date, permalink and other useful information go into the &lt;a href=&quot;https://jekyllrb.com/docs/front-matter/&quot;&gt;front-matter&lt;/a&gt; of the markdown file, for instance, the front matter for this page looks like so,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2020-05-24&lt;/span&gt; 
&lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/blog/pageSetup&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Webpage Setup using Jekyll&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;the-picture-frame-surrounding-your-webpage&quot;&gt;&lt;strong&gt;The Picture-Frame Surrounding Your Webpage&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;At the bottom of every page on your static website, are little links to the owners email, twitter and potentially other places of online presence. The structure of this bottom bar is dependent entirely on our choice of template and cannot be altered without creating our own fork of the template or using some other pre-existing template. The contents of the bottom bar are controlled by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file. The file for this web-page is given below.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ishank's Webpage&lt;/span&gt; 
&lt;span class=&quot;na&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ishank Juneja&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ishankjuneja@gmail.com&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;email2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ishankjuneja@iitb.ac.in&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;-&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this means to ignore newlines until &quot;baseurl:&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;Personal homepage: Ishank Juneja&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://ishank-juneja.github.io&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# the base hostname &amp;amp; protocol for your site, e.g. http://example.com&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;twitter_username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ishankjuneja&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;github_username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ishank-juneja&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;quora_username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ishank-Juneja&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;stackoverflow&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4477387/ishank-juneja&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jekyll-mentions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;base_url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://github.com&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Google Analytics&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;google_analytics&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;UA-166118550-1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;linkedin_username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ishank-juneja&lt;/span&gt; 
&lt;span class=&quot;na&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;_pages'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;footer-links-active&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;stackoverflow&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Build settings&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kramdown&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;minima&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-feed&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The files that create this frame around each webpage are present in a so-called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; and can be accessed and modified in the manner described in the next section. In an earlier version of Jekyll these files placed in specially named directories were accessible from the project directory by default. These concealed files consist of things like SVG files (for the GH icon, the twitter bird etc.)&lt;br /&gt;
The quick way to access these auxiliary files would be to refer to the source code of a pre-existing website. For instance, while making this webpage I refereed to &lt;a href=&quot;https://github.com/martiansideofthemoon/martiansideofthemoon.github.io&quot;&gt;this website&lt;/a&gt; which belongs to a former student here at IITB. His well desgined webpage also inspired me to add &lt;a href=&quot;https://stackoverflow.com/help/flair&quot;&gt;stack exchange flair&lt;/a&gt; to the footer of my webpage. Perhaps the better way to access this directory structure would be to navigate to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; supporting the content. This is explained in the next section.&lt;/p&gt;

&lt;h4 id=&quot;overriding-themes&quot;&gt;&lt;strong&gt;Overriding Themes&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;The files that help make the minima template are present in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; (Ruby language terminology). To be able to modify any of the default behaviour of the minima template, we can navigate to the Gemfile directory for the minima theme by running &lt;br /&gt; 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xdg-open $(bundle info --path minima)&lt;/code&gt; or&lt;br /&gt; 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd $(bundle info --path minima)&lt;/code&gt;&lt;br /&gt; 
in a terminal.&lt;/p&gt;

&lt;p&gt;On navigating to the minima template source location a user would see the following files-&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── assets
│   ├── main.scss
│   └── minima-social-icons.svg
├── _includes
│   ├── disqus_comments.html
│   ├── footer.html
│   ├── header.html
│   ├── head.html
│   ├── icon-github.html
│   ├── icon-github.svg
│   ├── icon-twitter.html
│   ├── icon-twitter.svg
│   └── social.html
├── _layouts
│   ├── default.html
│   ├── home.html
│   ├── page.html
│   └── post.html
├── LICENSE.txt
├── README.md
└── _sass
    ├── minima
    │   ├── _base.scss
    │   ├── _layout.scss
    │   └── _syntax-highlighting.scss
    └── minima.scss&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These are folders of the minima template that contain all the files, scripts and templates required to put together your webpage. To override any of the defualt behavious, as is done in many of the add on tutorials linked to in this blog, we need to make the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_sass&lt;/code&gt; folders available in our project directory by copy-pasting them there.&lt;br /&gt;
Hence forth, Jekyll would use the versions of these special name directories avaiable in our own project directory rather than the default theme &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; from which it was taking these files earlier. This allows us to make changes to the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post.html&lt;/code&gt; template. Modifying the template opens the door to things like adding a line that computes the estimated &lt;a href=&quot;http://planetjekyll.github.io/snippets/reading-time&quot;&gt;read time&lt;/a&gt;, adding analytics and LaTeX typesetting support among other things. For more, see the &lt;a href=&quot;https://jekyllrb.com/docs/themes/#overriding-theme-defaults&quot;&gt;overriding&lt;/a&gt; tutorial from the Jekyll documentation.&lt;/p&gt;

&lt;h4 id=&quot;monitoring-traffic-with-google-analytics&quot;&gt;&lt;strong&gt;Monitoring Traffic with Google Analytics&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;If you wish to see how many hits your blog is getting, you could choose to create a google analytics (GA) profile and add some code snippets as is explained in this well written blog post on &lt;a href=&quot;https://desiredpersona.com/google-analytics-jekyll/&quot;&gt;adding analytics to Jekyll&lt;/a&gt;. The post assumes that the project has an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; directory in case your project does not already have one by defualt, you could simply create an empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_includes&lt;/code&gt; directory and populate it with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;analytics.html&lt;/code&gt; file as described in the tutorial. However, simply doing this might be insufficient since the tutorial also tells us to add a few lines of code to a certain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;head.html&lt;/code&gt; file. The simplest way to cater to all these requirements is to populate the project directory with the complete folder structure as was described in the previous section.&lt;/p&gt;

&lt;p&gt;A caveat here is that the GA identification code for a website is publily accessible. This opens up the possibility of misuse through an deliberate or accidental attack that uses the same analytics code on another webpage. The good thing is that GA allows us to create filters to take care of such possiblities as has been described &lt;a href=&quot;https://stackoverflow.com/questions/49419250/is-sharing-google-analytics-tracking-id-safe&quot;&gt;here&lt;/a&gt;. The instructions are as follows,&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;In the google anayltics control view, in the lower left corner go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt; menu (The gear symbol)&lt;/li&gt;
  &lt;li&gt;Go to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;All Filters&lt;/code&gt; menu in the left most panel and click &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Filter&lt;/code&gt; to create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom-filter&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inclusive&lt;/code&gt; type filter and choose &lt;em&gt;Hostname&lt;/em&gt; as the Filter Field&lt;/li&gt;
  &lt;li&gt;In the hostname field enter the domain name of your website, for instance for this webpage I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ishank-juneja\.github\.io&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Save the filer and head back to the three pane admin interface, in the right most pane select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filters&lt;/code&gt; option, and apply the filter you created earlier to the GA code associated with the webpage you are protecting&lt;/li&gt;
  &lt;li&gt;This filter should exclude any spurious views arising from domain names other than your own&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;make-your-blog-interactive&quot;&gt;&lt;strong&gt;Make your Blog Interactive&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;If you’re like me, you would agree that an interactive element is still missing from the current setup. &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; is a free to use blog comment hosting service that comes pre-integrated with Jekyll. To add disqus comments to a blog simply, one may follow the instructions &lt;a href=&quot;https://desiredpersona.com/disqus-comments-jekyll/&quot;&gt;here&lt;/a&gt; which happen to be by the same author that wrote the piece on adding analytics to a jekyll webpage.&lt;/p&gt;

&lt;p&gt;A problem with Disqus is that, it asks for an email address from a viewer before it lets them leave a comment. Personally I feel this might be too much to ask for. A way around, to let viwers interact more seamlessly with your blog would be to enable &lt;a href=&quot;https://help.disqus.com/en/articles/2199501-reactions&quot;&gt;disqus reactions&lt;/a&gt;. Be sure to enable this before pushing the code changes mentioned in the linked tutorial that make Disqus initiate. This is because the inclusion of reactions, does not apply retrospectively to blog posts (rather URLs) that existed prior to its enabling.&lt;/p&gt;

&lt;h4 id=&quot;be-found-on-the-web&quot;&gt;&lt;strong&gt;Be Found on the Web&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;If you have gone through the trouble of creating your own webpage, you probably want your work to be found through Google (or other) search engines. This is where &lt;a href=&quot;https://search.google.com/search-console/about&quot;&gt;search console&lt;/a&gt; comes in. To help Google index your webpage more thoroughly, you can follow the instructions in &lt;a href=&quot;https://victor2code.github.io/blog/2019/07/04/jekyll-github-pages-appear-on-Google.html&quot;&gt;this tutorial&lt;/a&gt;. The indexing and subsequent visibility of your webpage as a top search result will take a few days to come into play.&lt;/p&gt;

&lt;h4 id=&quot;latex-for-the-web&quot;&gt;&lt;strong&gt;LaTeX for the Web&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;with-mathjax&quot;&gt;&lt;strong&gt;With MathJax&lt;/strong&gt;&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Technical posts inevitably involve mathematical symbols, equations and relationships. The software &lt;a href=&quot;https://www.latex-project.org/about/&quot;&gt;LaTeX&lt;/a&gt; is perhaps the most popular and efficient method of producing documents with typesetted mathematics. &lt;a href=&quot;https://www.mathjax.org/#gettingstarted&quot;&gt;MathJax&lt;/a&gt; is a type setting service for rendering mathematics typed using LaTeX on the web. It works by placing typeset mathematics at the appropriate location by first rendering the graphic object on their server and then delivering it to your website using a &lt;a href=&quot;https://www.cloudflare.com/en-in/learning/cdn/what-is-a-cdn/&quot;&gt;CDN&lt;/a&gt;. The setup required to make MathJax start working is quite minimal and is expalined in &lt;a href=&quot;http://sgeos.github.io/github/jekyll/2016/08/21/adding_mathjax_to_a_jekyll_github_pages_blog.html&quot;&gt;this blog&lt;/a&gt;.&lt;br /&gt; 
Once the setup is done, you can start to typeset inline and centered mathematics in a manner similar to the examples below,&lt;br /&gt;
Here we use inline math for the Pythagorean theorem: \( a^2 + b^2 = c^2\). This math in raw text looked like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\( a^2 + b^2 = c^2\\)&lt;/code&gt;. Next we have Euler’s famous result as display math, 
\[ e^{i \pi} + 1 = 0\]
Which could have been typset as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\[ e^{i \pi} + 1 = 0\\]&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;with-pandoc&quot;&gt;&lt;strong&gt;With Pandoc&lt;/strong&gt;&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In case we wish to make an existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tex&lt;/code&gt; file compatible with the web, we can use &lt;a href=&quot;https://pandoc.org/&quot;&gt;Pandoc&lt;/a&gt;. Pandoc can be installed using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-get install pandoc&lt;/code&gt;. Once installed, we can covert an existing LaTeX file, with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tex&lt;/code&gt; extension into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt; file using the command&lt;br /&gt; 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandoc -s name-of-the-file.tex --mathjax -o name-of-the-file.html&lt;/code&gt;.&lt;br /&gt;
This is preferable if the contents of the document are to remain unchanged, however, if significant changes are to be made, it would be easier to make them to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; file rather than an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt; file. Pandoc provides the option to convert a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tex&lt;/code&gt; file to Markdown directly using the command&lt;br /&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandoc -s name-of-the-file.tex --mathjax -o name-of-the-file.md&lt;/code&gt;.&lt;br /&gt; 
Though alright in principle, I found two practical difficulties with this approach.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Display math is not rendered correctly since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Markdown + MathJax&lt;/code&gt; requires the use of formatting of the type&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;Some text prior

&lt;span class=&quot;p&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\Big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}^{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\Big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\leq&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\Big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}^{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\Big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\Big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}^{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\Big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$$&lt;/span&gt;

Some text after&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some text prior&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Big(\sum_{i = 1}^{n} a_i b_i\Big)^2 \leq 
\Big(\sum_{i = 1}^{n} a_i^2\Big) \Big(\sum_{i = 1}^{n} b_i^2\Big)&lt;/script&gt;

&lt;p&gt;Some text after&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;However the auto-generated output from pandoc would give something like the following instead&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;Some text prior &lt;span class=&quot;p&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\Big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}^{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\Big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\leq&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\Big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}^{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\Big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\Big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}^{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt; b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;\Big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$$&lt;/span&gt; Some text after&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some text prior &lt;script type=&quot;math/tex&quot;&gt;\Big(\sum_{i = 1}^{n} a_i b_i\Big)^2 \leq 
\Big(\sum_{i = 1}^{n} a_i^2\Big) \Big(\sum_{i = 1}^{n} b_i^2\Big)&lt;/script&gt; Some text after&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Even with inline math, I observed that there were some problems with rendering some fonts, for instance &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$\mathcal{V}$&lt;/code&gt; was not producing correct results, moreover its presence was distorting subsequent text.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;None of these problems show up in the html version of these files. As I understand the reason for this is that the html file created by pandoc has explicit tags rather than $ symbols which makes all code unambiguous to MathJax. In my opinion, to get the best of both worlds, an easy workaround is to first create an html file using pandoc, then change its file extension to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; so that it can be edited like a Markdown file while having all the math correctly rendered using html tags.&lt;/p&gt;

&lt;p&gt;MathJax is not as powerful as native TeX and there would likely be some other compatibility issues between the contents of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tex&lt;/code&gt; file and what MathJax is capable of. Some alternatives to MathJax to typeset math are &lt;a href=&quot;https://katex.org/&quot;&gt;KaTeX&lt;/a&gt; and &lt;a href=&quot;https://latex.now.sh/&quot;&gt;LaTeX.css&lt;/a&gt;. These require some additional setup and I couldn’t get them to work on my webpage.&lt;/p&gt;

&lt;h4 id=&quot;in-conclusion&quot;&gt;&lt;strong&gt;In Conclusion&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;While getting my webpage up and running and subsequently adding snippets of copy-pasted html and JavaScript to implement the add ons, often times instructions were unclear. When stuck, or even when starting off, the best way to be done might be to either download or fork the &lt;a href=&quot;https://github.com/ishank-juneja/ishank-juneja.github.io&quot;&gt;source repository&lt;/a&gt; for this webpage.&lt;/p&gt;</content><author><name></name></author><summary type="html">This post illustrates how to get a Jekyll static site up and running with some useful add-ons and tips. Rather than be a self contained post, this serves as more of a collection of pointers to other useful resources around the internet that when taken together get the job done. The tutorial and linked instructions assume a linux system with a bash shell available. Further familiarity with creating content for the Web with Markdown is assumed.</summary></entry><entry><title type="html">Electronic Stethoscope Front-End</title><link href="http://localhost:4000/projects/course/steth/" rel="alternate" type="text/html" title="Electronic Stethoscope Front-End" /><published>2020-05-24T00:00:00+05:30</published><updated>2020-05-24T00:00:00+05:30</updated><id>http://localhost:4000/projects/course/steth</id><content type="html" xml:base="http://localhost:4000/projects/course/steth/">&lt;p&gt;A traditional Stethoscope acquires body signals acoustically. The sounds reach a doctor’s ears through
rubber tubes. The ability to make accurate inferences from these sounds is limited by the physicians
experience.&lt;/p&gt;

&lt;p&gt;The Goal of this project was to conceptualize an instrumentation circuit capable of filtering out and amplifying
Internal Body Sounds. Achieving this drastically reduces the dependence of diagnosis on the sensitivity
of a medical practitioner’s ear.&lt;/p&gt;

&lt;p&gt;The end result was a microphone fed electronic circuit capable of displaying heart sounds on an oscilloscope.
A major aspect of the project was identifying and eliminating sources of noise.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete Schematic for Design&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/schematic_steth.png&quot; alt=&quot;Stethoscope&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Result with characteristic peaks corresponding to the Lub-Dub sounds of Heart&lt;/li&gt;
&lt;/ul&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/steth.jpg&quot; alt=&quot;Stethoscope&quot; /&gt;
&lt;/p&gt;</content><author><name></name></author><summary type="html">A traditional Stethoscope acquires body signals acoustically. The sounds reach a doctor’s ears through rubber tubes. The ability to make accurate inferences from these sounds is limited by the physicians experience.</summary></entry><entry><title type="html">Review of Man’s Search for Meaning, by Viktor Frankl</title><link href="http://localhost:4000/blog/meaning" rel="alternate" type="text/html" title="Review of Man’s Search for Meaning, by Viktor Frankl" /><published>2018-10-09T00:00:00+05:30</published><updated>2018-10-09T00:00:00+05:30</updated><id>http://localhost:4000/blog/meaning</id><content type="html" xml:base="http://localhost:4000/blog/meaning">&lt;p&gt;Staying intrinsically motivated is important for self-improvement and progress. I have always wanted to understand factors that influence motivation and I found Frankl’s book to be extremely insightful in this regard. There are numerous accounts of the Holocaust that go into detail about atrocities committed in the dreaded concentration camps of Nazi Germany. This book is unique in that it discusses Psychological aspects of imprisonment, torture, starvation and suffering.&lt;/p&gt;

&lt;p&gt;At the very start Frankl paints a vivid picture of life in Auschwitz and other camps. He focuses on the everyday sufferings that made life seem like a burden to prisoners. A few things really stood out to me about life in concentration camps. People were robbed completely of their identities and their existence was reduced to a mere number. Inmates were forced to work long hours performing intensive manual labour, and at the same time their diets were limited to a few slices of bread and a single serving of soup. Life and death were extremely unpredictable and a prisoner could be executed on the whim of a guard. It is fascinating that under this kind of an atmosphere, inmates still managed to have light-hearted discussions and steal a few moments to appreciate art and partake in humour.
A major theme in the book that I found interesting, is the progression of an inmate’s mental state through three stages; Shock about the state of affairs at camp, entrenchment into the camp routine, and the reaction following their release. On arrival at a camp location, many inmates were directly sent to the gas chambers and crematoriums. The survivors of this event considered themselves lucky to be alive, but soon their gratitude turned into despair as they endured through camp life. The struggles included being stripped of all their clothes and possessions, walking barefoot over ice leading to frostbite and contracting infections due to their damaging lifestyles. 
Soon, starvation and constant physical pain reduced people in concentration camps to primitive beings. Their thoughts were limited to food and survival. Frankl describes the horrific way in which people dropped dead from disease, injuries and exhaustion during this time. Omnipresent death and suffering lead to a sense of apathy among the inmates. These traits marked the second stage of camp life. Reading about this caused me to think deeply about the ideas of humanity and morality – things that supposedly make us human. Values like these differentiate us from animals, however, in the absence of all the comforts of daily life we are not above the nourishment needs of our bodies.&lt;/p&gt;

&lt;p&gt;Frankl emphasises that humans are peculiar in that they can only be content in the present by looking to and hoping for a better future. In fact, the author goes a step further and says, even suffering can become bearable if we look at how the experience could be of value to us in future through a possible silver lining. To validate these ideas he points to anecdotal evidence from his time at the camp. Prisoners who lost faith in the future would become subject to mental decay, and sooner or later they would perish. For other prisoners, the motivation to survive came from looking forward to life after their eventual homecoming. 
On understanding Frankl’s thoughts on motivation, I looked back to my own life and all the achievements that I was proud of. I have found myself in complete agreement with the view that the key to a meaningful life is to rise up to challenges that are sent our way. However, despite all the struggle, it is possible that we do not reach the goal we strived for. This is not something to lament over, since our struggles have intrinsic value of their own. Instead we should accept our situation and persevere towards our goal.
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This review was written for a course assignment for the Introduction to Psychology course at IIT Bombay&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Staying intrinsically motivated is important for self-improvement and progress. I have always wanted to understand factors that influence motivation and I found Frankl’s book to be extremely insightful in this regard. There are numerous accounts of the Holocaust that go into detail about atrocities committed in the dreaded concentration camps of Nazi Germany. This book is unique in that it discusses Psychological aspects of imprisonment, torture, starvation and suffering.</summary></entry><entry><title type="html">What is your earliest childhood memory?</title><link href="http://localhost:4000/blog/memory" rel="alternate" type="text/html" title="What is your earliest childhood memory?" /><published>2018-08-28T00:00:00+05:30</published><updated>2018-08-28T00:00:00+05:30</updated><id>http://localhost:4000/blog/memory</id><content type="html" xml:base="http://localhost:4000/blog/memory">&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/deep_pool.jpg&quot; alt=&quot;nixie clock&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;It is well known that Childhood memories get distorted if not entirely eroded as we get older. However, some early childhood memories can be recalled vividly if there are strong emotions associated with them. Reflecting on my own childhood memories puts into perspective how daunting the world looks from a child’s point of view. Swimming is one of the activities that seemed very intimidating to me as a five-year-old child.&lt;/p&gt;

&lt;p&gt;I am surprised by how detailed my memory of certain childhood swimming lessons is. I recall that I was one of the kids who was the most scared of jumping into the water. The fact that I was not confident in my ability to swim and stay afloat meant that I hung on to floaters far longer than the other children. Among the many swim lessons that I took at my first swim club, one stands out to me the most.&lt;/p&gt;

&lt;p&gt;A few weeks into the beginners camp, we had learned basic crawl stroke and some other tricks like the correct way to bring the head out and to breathe through the mouth. I was just starting to get comfortable with the water when one day, to my horror, the instructor decided that we were ready to jump into the larger, deeper adult sized pool. Reluctantly I marched along with our group towards the main pool complex. When we reached, what I saw before me was everything I feared the large pool would be.&lt;/p&gt;

&lt;p&gt;The pool had water so deep that I couldn’t even see the bottom. Though this is common for swimming pools, as a child who had only ever been in shallow baby pools, I questioned whether the pool even had a floor! The instructor gestured us to line up. I, though completely unprepared for the ordeal, complied with the instructions and tried to take a position furthest from the pool. The other children seemed to have no problem jumping to their potential doom, but I for one was not ready to walk the plank. So, being a logical person, when my turn came to jump in, I refused. The people behind me in line went in first until I was the only student outside the water. The instructor walked up to me and demanded to know why I wasn’t in the water. I think I made up a story about how I wasn’t feeling well and didn’t want to swim. She saw through the lies and insisted that I jump.&lt;/p&gt;

&lt;p&gt;Left without a choice, I jumped thinking that the cruel teacher will surely pay for making an innocent child suffer. Once in, my body kicked into survival mode and I twirled and flailed my way to the other end. Still unsure of the unfamiliar body of water and thinking of the horrible creatures that could be lurking underneath me, I wasted no time pulling myself out of the water.
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;This essay was written for a course assignment for the Introduction to Psychology course at IIT Bombay&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>